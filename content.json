[{"title":"入门：HTTP 笔记","date":"2018-03-31T11:36:45.000Z","path":"2018/03/31/入门：HTTP/","text":"http入门 一些零碎的知识点 www:world wide web,万维网之父：Tim Berners-Lee URI(统一资源标识符):uniform resource identifier URL(统一资源定位符):uniform resource locator URN(统一资源命名符)：uniform resource name 通过urn来确定一个唯一 的资源通过url来确定一个地址（网址）但不清楚其中内容是什么，并且其内容可以更换uri是url和urn的统称,URN定义某事物的身份，而URL提供查找该事物的方法。 DNS(域名系统):domain name system是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库 修改host文件可以暂时科学上网 .com , .cn , .mobi etc 是顶级（一级）域名 ； xxx是二级域名 ；www. 是三级域名 ； （交流中默认xxx是一级域名） 请求与响应 http协议下服务器与浏览器一般是单项访问，如同打乒乓使用qq聊天就不能算是http协议每一台服务器有很多端口，每一个端口只有一种功能,其中80端口是用于服务http协议,如果要做一个后台服务器，必须将80端口暴露给人用 浏览器负责发起请求 服务器在80端口接收请求 服务器负责返回内容（响应） 浏览器负责下载响应内容HTTP的作用就是指导浏览器和服务器的沟通 curl -s -v -H “lalala” – “www.baidu.com&quot;curl:发出网络请求并接收数据s:不要显示进度 v:使请求和响应更详细 -H：显示请求头 发出请求： 1. 动词(GET/POST) 路径(/xxx) 协议/版本(HTTP/1.1) 2. Key1: value1 2. Key2: value2 2. Key3: value3 2. 希望返回内容:xxx/xxx(Accept:text/html) 2. 用户代理：xxxx(User-Agent:curl/xxxx) 2. 访问主机：(Host:xxxx) 3. (回车) 4. 要上传的数据 响应： 1. 协议/版本号 状态码 状态解释 2 Key1: value1 2 Key2: value2 2 Content-Length: 17931 2 Content-Type: text/html;charset:utf-8; 3 4 要下载的内容 可以用开发者工具的Network查看响应的第4部分","tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"}]},{"title":"暗时间阅读笔记","date":"2018-03-31T11:36:45.000Z","path":"2018/03/31/暗时间/","text":"第一次接触《暗时间》这本书是在2015年吧，当时读来没有太多感受。现在走在前端学习的道路上，再翻看这本书，每一小节都是干货，想要将其中的一些内容身体力行地实践 学习习惯 人与人之间学习的差距在于思考的时间与深度 感到焦虑时不妨思考，甚至可以去理性分析和思考焦虑的问题本身，将其拆解，分析来源，不知不觉中，大脑的工作重心就从情绪模块转向了推理模块，这思考也可能顺带更有效地解决导致焦虑的问题。 学习一项知识有三问：它的：本质、第一原则、知识结构 善于利用“时间的下脚料”，也同时善于创造整块时间","tags":[{"name":"阅读","slug":"阅读","permalink":"http://yoursite.com/tags/阅读/"}]},{"title":"入门：脚本 笔记","date":"2018-03-30T09:36:45.000Z","path":"2018/03/30/入门：脚本/","text":"命令行 “.bashrc”的小用处1.在用户目录下创建 .bashrc 文件 touch ~/.bashrc 用编辑器在这个文件里创建一些命令，就可以在进入Git bash之前执行任何命令2.在.bashrc中添加alias命令来简化已有命令 alias n=&quot;mkdir ~/a.html&quot; 作用是运行n就在用户目录创建a.html文件你可以把常用的命令进行简化使git操作简单很多 3.可以在“.bashrc”中添加环境变量 4.设置PATH export PATH=&quot;目录的绝对路径:$PATH&quot; 可以在PATH里添加一个目录，被你添加到PATH中的目录下的文件都可以不需要加路径直接运行，你每次在 Bash 里面输入一个命令时（比如 ls、cp、demo），Bash 都会去 PATH 列表里面寻找对应的文件，如果找到了就执行。 ##脚本在用户目录创建一个名为“demo”的文件（后缀随意）用编辑器编辑它: cd ~/desktop mkdir script cd script touch a.html b.css 在bash中用sh命令执行这个脚本 sh ~/demo 你就可以在桌面上看到 “script” 文件，点进去还有a.html, b.css这就是脚本，写给计算机看的剧本，计算机会按你写的命令一条条执行。 在脚本中引入参数把“demo”内容改成： cd ~/desktop mkdir $1 cd $1 touch $2.html $3.css 执行脚本时加上参数： sh ~/demo ni shi zhu 你就可以在桌面上看到 “ni” 文件，点进去还有shi.html, zhu.css当你在脚本女重写入$符号，计算机就会按数字顺序读取你输入的参数 上面我们写的脚本叫做 Bash Script（Bash脚本），JS 的全称叫做 JavaScript（Java脚本），虽然 JS 和 Java 没什么关系，但是 JS 依然是一种脚本。 我们在 Bash 命令行里输入 Bash 命令，也可以在 Node.js 命令行里输入 JS 命令,Bash 脚本能做的事情，JS 脚本也能做。(sh demo.sh 对应 node demo.js） 如果你安装过node.js 在bash里输入node即可进入node运行环境 两者语法会有所不同，不必专门去学，需要用到时去学即可在Google上查询语法的关键字应是： bash(node.js) + xxxxx shebang我们每次执行js脚本都要用 node 来执行(不知道怎么在node环境中执行？)，能不能做到不加 node 也能执行呢（也就是指定执行环境），可以，在 js脚本第一行加上这一句即可： #!/usr/bin/env node 所以shebang的作用就是指定执行环境","tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"}]},{"title":"如何用css制作一个太极图案","date":"2018-03-24T06:44:05.000Z","path":"2018/03/24/如何用css制作一个太极图案/","text":"css功能多种多样，使用::before 和 ::after生成的伪元素可以在一个div元素中创造内部图案 先制作一个圆形在html中定义一个div元素: &lt;div class=&quot;yin-yang&quot;&gt;&lt;/div&gt; 在css中配置样式: .yin-yang { width: 100px; height: 50px; background: white; border:1px solid black; border-width:1px 1px 51px 1px;/*用来填充圆形下半部分，51px=50px元素背景+1px边框使上下对称*/ border-radius:50%; /*定义边框半径占整体的比例，越接近50%越像一个圆*/ position:relative;/*与下面的伪元素position配合使用*/ } 制作圆内伪元素在css中配置样式： .yin-yang::before { content: &quot;&quot;; position:absolute;/*不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素(即yin-yang)的偏移，来确定元素位置*/ height:15px; width:15px;/*定义元素（即太极图案内部小洞洞）大小*/ background: white; border-radius:50%; border:17.5px black solid;/*太极内部圆的大小*/ margin-top:20px;/*也可以用 top来定位*/ } .yin-yang::after { content: &quot;&quot;; position:absolute; height:15px; width:15px; background:black; border-radius:50%; border:17.5px white solid; margin-left:50px; margin-top:20px /*也可以用top和left来定位*/ } 最终结果： 参考来自 css.tricks(好像要科学上网才能看): https://css-tricks.com/examples/ShapesOfCSS/","tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"如何用css制作一个太极图案","date":"2018-03-24T06:44:05.000Z","path":"2018/03/24/学习生活中细碎的发现/","text":"今天在网上写大物实验报告时产生了很大的焦虑情绪，极大地影响我对完成后续任务心态，一度想放弃，关键在于我打开编辑器想做一些简单工作来偷懒的时候（写博客），我逐渐恢复状态。因此我觉得是不是可以在下次状态不好时，在真正进入任务之前先做一些预热：背单词，罗列明日的任务等缓解焦虑的状态。除此以外对于为什么在网上填写实验报告那么让人揪心进行分析：","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"用Hexo+Github搭建一个博客（不完全指南）","date":"2018-03-07T12:48:05.000Z","path":"2018/03/07/用Hexo-Github搭建一个博客/","text":"安装Hexo 在gitbash 中输入： npm install -g hexo-cliGithub上创建一个新仓库在 GitHub 上新建一个空 repo，repo 名称是「你的用户名.github.io」（请将你的用户名替换成真正的用户名）创建目录在任意空白处创建一个文件夹，用Gitbash打开该文件夹，并执行以下指令 hexo initHexo 即会自动在目标文件夹建立网站所需要的所有文件安装依赖包 npm install 编辑网站配置 用vs code编辑 _config.yml 文件 1.把第 6 行的 title 改成你想要的名字 2.把第 9 行的 author 改成你的大名 3.把最后一行的 type 改成 type: git 4.在最后一行后面新增一行，左边与 type 平齐，加上一行 repo: 仓库地址 （请将仓库地址改为「你的用户名.github.io」对应的仓库地址安装 git 部署插件 npm install hexo-deployer-git --save 生成网页并部署gitbash中输入 hexo generate hexo deploy 出现以下提示说明部署成功： [info] Deploy done: git","tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"}]}]